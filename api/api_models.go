/*
 *
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"database-manager/api/models"
	"database-manager/handlers"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"fmt"

	"github.com/gorilla/mux"
)
func fromJsontoData (body []byte) models.Data{
	var data models.Data
	json.Unmarshal([]byte(body), &data)
	fmt.Println("DataID:", data.DataID)
	fmt.Println("Data Content:", data.Content)
	return data
}
// AddInsight adds insight to db and returns response to user
func AddContent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	body, err := ioutil.ReadAll(r.Body)
	data := fromJsontoData(body)
	if err != nil {
		json.NewEncoder(w).Encode(models.Response{Code: 400, Message: err.Error()})
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	res, err := handlers.CreateContent(data)
	if err != nil {
		json.NewEncoder(w).Encode(models.Response{Code: 400, Message: err.Error()})
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	json.NewEncoder(w).Encode(models.Response{Code: 200, Message: res})
	w.WriteHeader(http.StatusOK)
	return
}
func GetContent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	res, err := handlers.GetContent(vars["id"])
	if err != nil {
		json.NewEncoder(w).Encode(models.Response{Code: 400, Message: err.Error()})
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(models.Response{Code: 200, Message: res})
	return
}
func AddInsight(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	body, err := ioutil.ReadAll(r.Body)
	var data models.Data
	json.Unmarshal([]byte(body), &data)
	if err != nil {
		json.NewEncoder(w).Encode(models.Response{Code: 400, Message: err.Error()})
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	res, err := handlers.CreateInsight(data)
	if err != nil {
		json.NewEncoder(w).Encode(models.Response{Code: 400, Message: err.Error()})
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	json.NewEncoder(w).Encode(models.Response{Code: 200, Message: res})
	w.WriteHeader(http.StatusOK)
	return
}

// GetInsightByID gets insight from db and returns response to user
func GetInsightByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	res, err := handlers.GetInsight(vars["id"])
	if err != nil {
		json.NewEncoder(w).Encode(models.Response{Code: 400, Message: err.Error()})
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	json.NewEncoder(w).Encode(models.Insight{InsightID: res.InsightID, DataID: res.DataID})
	w.WriteHeader(http.StatusOK)
	return
}
